{"version":3,"sources":["assets/Script/Model/GameModel.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import StateMachine from \"./StateMachine\";\nimport Config from \"../Common/Config\";\nimport { NewRoundModelStruct, SetteModelStruct, UserScoreModelStruct } from \"../Common/ModelStruct\";\n\nconst GAME_STATE = {\n    NEW_ROUND: \"new_round\",\n    SETTLE: \"settle\",\n};\n\nconst STATE_TIME = {\n    [GAME_STATE.NEW_ROUND]: 30 * 1000,\n    [GAME_STATE.SETTLE]: 10 * 1000,\n};\n\nconst MODEL_EVENT = {\n    NEW_ROUND: \"NEW_ROUND\",\n    SETTLE: \"SETTLE\",\n    SYNC_USER_SCORE: \"SYNC_USER_SCORE\",\n};\n\nconst INTERVAL_TIME = 1 * 1000;\n\nexport default class GameModel {\n    readonly MODEL_EVENT = MODEL_EVENT;\n\n    private _stateMachine: StateMachine;\n    private _intervalHandler: any;\n    private _eventDispatcher: Function;\n    // 游戏逻辑相关\n    private _userScore: number;\n    private _betScores: number[];\n\n    constructor(eventDispatcher: Function){\n        this._eventDispatcher = eventDispatcher;\n        this._intervalHandler = null;\n\n        this._userScore = Config.GAME_BEGIN_SCORE;\n        this._betScores = [0, 0, 0];\n        // 模拟 server 来封包\n        this._stateMachine = this._createStateMachine();\n    };\n\n    login(){\n        this._stateMachine.transferState(GAME_STATE.NEW_ROUND, 0);\n        this._intervalHandler = setInterval(() => this._update(INTERVAL_TIME), INTERVAL_TIME);\n    };\n\n    leave(){\n        clearInterval(this._intervalHandler);\n        this._intervalHandler = null;\n    };\n\n    userBet(betScores: number[]){\n        for(let idx = 0; idx < betScores.length; idx++){\n            this._betScores[idx] += betScores[idx];\n            this._userScore -= betScores[idx];\n        };\n\n        let struct: UserScoreModelStruct = {\n            userScore: this._userScore,\n        };\n        this._eventDispatcher(MODEL_EVENT.SYNC_USER_SCORE, struct);\n    };\n\n    private _update(dt: number){\n        this._stateMachine.update(dt);\n    };\n\n    private _onNewRound(){\n        let stateTime = STATE_TIME[GAME_STATE.NEW_ROUND];\n        let struct: NewRoundModelStruct = {\n            userScore: this._userScore,\n            stateTime: stateTime\n        };\n\n        this._betScores = [0, 0, 0];\n        this._eventDispatcher(MODEL_EVENT.NEW_ROUND, struct);\n        this._stateMachine.transferState(GAME_STATE.SETTLE, stateTime);\n    };\n\n    private _onSettle(){\n        let stateTime = STATE_TIME[GAME_STATE.SETTLE];\n        let winArea = Math.floor(Math.random() * Config.AREA_TYPES.length);\n        let winScore = this._getWinScore(winArea);\n        this._userScore += winScore;\n        let struct: SetteModelStruct = {\n            userScore: this._userScore,\n            winArea: winArea,\n            settleScore: winScore,\n            stateTime: stateTime\n        };\n        this._eventDispatcher(MODEL_EVENT.SETTLE, struct);\n        this._stateMachine.transferState(GAME_STATE.NEW_ROUND, stateTime);\n    };\n\n    private _getWinScore(winArea: number): number{\n        let winScore = 0;\n        for (let idx = 0; idx < this._betScores.length; idx++)\n            winScore += idx == winArea? this._betScores[idx] * (Config.AREA_ODDS[idx] + 1): -this._betScores[idx];\n        return winScore;\n    };\n\n    private _createStateMachine(): StateMachine{\n        let stateMachine = new StateMachine();\n        stateMachine.addState(GAME_STATE.NEW_ROUND, this._onNewRound.bind(this));\n        stateMachine.addState(GAME_STATE.SETTLE, this._onSettle.bind(this));\n        return stateMachine;\n    };\n};"]}